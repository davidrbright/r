install.packages("swirl")
library("swirl")
library("swirl")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("httr")
install.packages("RCurl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
library("swirl")
ls()
rm(list=ls())
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files
)
old.dir <- dir()
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
swirl?
sdf
library("swirl")
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "David")
my_name <- c(my_char, "David")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
qt(.975,20)
help.start()
x <- rnorm(50)
y <- rnorm(x)
x
y
plot(x, y)
ls()
rm(x, y)
ls()
plot(z)
z
x <- 1:20
w <- 1 + sqrt(x)/2
plot(w)
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
plot(dummy)
fm <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm)
fm1 <- lm(y ~ x, data=dummy)
summary(fm1)
attach(dummy)
dummy
dummy
attach(dummy)
fm1
lrf <- lowess(x, y)
plot(x, y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
detach()
plot(fitted(fm1), resid(fm),)
plot(fitted(fm), resid(fm), xlab="Fitted values", ylab="Residuals", main="Residuals vs Fitted")
qqnorm(resid(fm1), main="Residuals Rankit Plot")
rm(fm, fm1, lrf, x, dummy)
filpath <- system.file("data", "morley.tab", package="datasets")
filpath
file.show(filpath)
mm <- read.table(filpath)
mm
mm$Expt <- factor(mm$Expt)
mm$Run <- factor(mm$Run)
attach(mm)
plot(Expt, Speed, main="Speed of Light Data", xlab="Experiment No.")
fm <- aov(Speed ~ Run + Expt, data=mm)
summary(fm)
fm0 <- update(fm, . ~ . - Run)
anova(fm0, fm)
detach()
rm(fm, fm0)
x <- seq(-pi, pi, len=50)
y <- x
x
y
f <- outer(x, y, function(x, y) cos(y)/(1 + x^2))
oldpar <- par(no.readonly = TRUE)
par(pty="s")
contour(x, y, f)
contour(x, y, f, nlevels=15, add=TRUE)
fa <- (f-t(f))/2
contour(x, y, fa, nlevels=15)
par(oldar)
par(oldpar)
image(x, y, f)
image(x, y, fa)
objects() ; rm(x, y, f, fa)
th <- seq(-pi, pi, len=100)
z <- exp(li*th)
z <- exp(1i*th)
par(pty="s")
plot(z, type="1")
plot(z, type="l")
w <- rnorm(100) + rnorm(100)* 1i
w <- ifelse(Mod(w) > 1, 1/w, w)
plot(w, xlim=c(-1,1), ylim=c(-1,1), pch="+", xlab="x", ylab="y")
lines(z)
w <- sqrt(runif(100))*exp(2*pi*runif(100)*1i))
w <- sqrt(runif(100)*exp(2*pi*runif(100)*1i))
plot(w, xlim=c(-1,1), ylim=c(-1,1), pch="+", xlab="x", ylab="y")
linez(z)
lines(z)
rm(th, w, z)
q()
library("swirl")
swirl()
install_course("Psychology_Statistics")
swirl()
library("swirl")
swirl()
swirl()
View(data)
?rnorm
rnorm(10, 5, 1)
rnorm(10, mean=5, sd=1)
psych.describeBy(variable_two)
psych::describeBy(variable_two)
class_name <- "Psychology"
class_name <- "Introduction to R"
class(class_name)
c("I", "Love", "R")
name <- c("I", "Love", "R")
library("swirl")
swirl()
head(data)
table(data$color)
levels(data$cut)
psych::describeby(data$carat)
psych::describeBy(data$carat)
psych::describeBy(data$price)
scatterplot
scatterplot_line
differential_graph
head(data)
graph1
graph2
graph3
install.packages("ggplot2")
install.packages("nlme")
install.packages("lattice")
install.packages("nlme")
install.packages("pastecs")
install.packages("reshape")
install.packages("WRS", repos="http://R-Forge.R-project.org")
library(ggplot2);
library(nlme);
library(pastecs);
library(reshape);
wd
wd()
ls()
install.packages("car")
# Linear Regression Script
# This focuses just on linear regression. Following Andy Field's R book.
# set working directory first
setwd("programming/r/Learning")
# Add all dependencies first
library(boot)
library(car)
library(QuantPsyc)
# foriegn library allows you to read SPSS data
library(foreign)
# Add data
spiteAggData <- read.spss("HW1.sav", to.data.frame = TRUE)
View(spiteAggData)
# Linear Regression Script
# This focuses just on linear regression. Following Andy Field's R book.
# set working directory first
setwd("programming/r/Learning")
# Add all dependencies first
library(boot)
library(car)
library(QuantPsyc)
# foriegn library allows you to read SPSS data
library(foreign)
# Add data. This added all of the same data that was in SPSS with variable names
spiteAggData <- read.spss("HW1.sav", to.data.frame = TRUE)
# This is the regression model. The outcome variable is first, predictors
# are second after the ~. By setting data file I don't have to type $ for each
# variable.
spitePred <- lm(Aggression ~ Spitefulness, data = spiteAggData)
# that created the spitePred object which I have to then get a summary of.
summary(spitePred)
lm.beta(spitePred)
source('~/programming/r/Learning/linearRegression.R')
summary(spitePred)
durbinWatsonTest(spiteAggData)
spiteAggData$residuals <- resid(spitePred)
